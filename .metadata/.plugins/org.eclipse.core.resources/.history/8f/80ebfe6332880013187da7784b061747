package com.kawasaki.calculator;

import junit.framework.TestCase;

public class CalcTest extends TestCase {
	calc cal;

	protected void setUp() throws Exception {
		super.setUp();
		cal = new calc();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	/*
	 * old api test(they will be obsoleted)
	 */

	// 一つの数値の減算
	public void test_sub_one_number() {
		assertEquals(-5, cal.sub(5));
	}

	// 二つの数値の減算
	public void test_sub_two_number() {
		assertEquals(-5, cal.sub(5));
		assertEquals(-15, cal.sub(10));
	}

	// 一つ目の計算値を格納する
	public void test_mul_two_number() {
		// assertEquals(10, cal.mul(10));
	}

	/*
	 * Add Test
	 */

	// 二つの値が加算される
	public void test_Add_two_number() {
		assertEquals(5, cal.add(5));
		assertEquals(15, cal.add(10));
	}

	public void test_Add_tow_number_2() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		assertEquals(15, cal.equal());
	}

	// ３つの数値の加算。二つの値が加算された後、数字 + = で、前回の　演算子+　でその数値を足す
	public void test_new_number_is_added_to_previous_result() {
		assertEquals(5, cal.add(5));
		assertEquals(15, cal.add(10));
		assertEquals(115, cal.add(100));
	}

	public void test_3_number_is_added_to_previous_result_2() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorAdd();
		cal.setVal(10);
		assertEquals(25, cal.equal());
	}

	// Clearでmemory、途中の計算結果は消える
	public void test_add_clear() {
		cal.add(5);
		cal.add(10);
		cal.add(100);
		cal.clear();
		assertEquals(1, cal.add(1));
	}

	/*
	 * Subtract test
	 */

	// 2つの値が減算される
	public void test_sub_tow_number_2() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);
		assertEquals(-5, cal.equal());
	}

	// ３つの数値の減算。二つの値が減算された後、数字 - = で、前回の　演算子-　でその数値を引く
	public void test_new_number_is_subtracted_with_previous_result() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(100);
		assertEquals(-105, cal.equal());
	}

	/*
	 * 足し算と引き算
	 */
	public void test_add_and_sub() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(100);
		assertEquals(-85, cal.equal());
	}

	/*
	 * かけ算
	 */
	// 2つの値を乗算する
	public void test_mul_tow_number() {
		cal.setVal(5);
		cal.setOperatorMul();
		cal.setVal(10);
		assertEquals(50, cal.equal());
	}
	
	// 3つの値を乗算する
	public void test_mul_three_numbers() {
		cal.setVal(5);
		cal.setOperatorMul();
		cal.setVal(10);
		cal.setOperatorMul();
		cal.setVal(50);
		assertEquals(2500, cal.equal());
	}
	
	//足し算／引き算／かけ算
	public void test_mul_is_calculated_prior_to_sub() {
		cal.setVal(5);// total 5
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();// total 15
		cal.setVal(8);
		cal.setOperatorMul();//-8は先に30をかける
		cal.setVal(30);
		
		assertEquals(-225, cal.equal());
	}
	
	public void test_mul_is_calculated_prior_to_add() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);// total 5
		cal.setOperatorAdd();//total 15
		cal.setVal(8);
		cal.setOperatorMul();//8は先に30をかける
		cal.setVal(30);
		
		assertEquals(235, cal.equal());
	}
	
	/*
	 * 除算
	 */
	
	
	/*
	// ３つの数値の減算。二つの値が減算された後、数字 - = で、前回の　演算子-　でその数値を引く
	public void test_new_number_is_subtracted_with_previous_result() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(100);
		assertEquals(-105, cal.equal());
	}
*/
		
	
	/*
	 * public void test_3_number_is_added_to_previous_result_2() {
	 * cal.setVal(5); assertEquals(5,cal.setOperatorAdd()); cal.setVal(10);
	 * assertEquals(15,cal.setOperatorAdd()); cal.setVal(10); assertEquals(25,
	 * cal.equal()); }
	 * 
	 * //Clearでmemory、途中の計算結果は消える public void test_add_clear() { assertEquals(5,
	 * cal.add(5)); assertEquals(15, cal.add(10)); assertEquals(115,
	 * cal.add(100)); cal.clear(); assertEquals(1,cal.add(1)); }
	 */

	// 定数乗算。後にかけた値がセットされ、移行　？＝　でセットされた値でかけ算していく
	public void test_numbers_are_continuously_added_with_equal() {
		// cal.setVal(5);
		// assertEquals(5,cal.setOperatorAdd());
		// cal.setVal(10);
		// assertEquals(15,cal.setOperatorAdd());
		// assertEquals(30, cal.equal());//=を押すと15が足される
		// assertEquals(45, cal.equal());//=を押すと15が足される
		// assertEquals(60, cal.equal());//=を押すと15が足される
	}

	// overflowにおいては 1e の表記を行う

}
