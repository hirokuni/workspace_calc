package com.kawasaki.calculator;

import junit.framework.TestCase;

public class CalcTest extends TestCase {
	calc cal;

	protected void setUp() throws Exception {
		super.setUp();
		cal = new calc();
	}

	protected void tearDown() throws Exception {
		super.tearDown();
	}

	/*
	 * Add Test
	 */

	// 二つの値が加算される
	public void test_Add_tow_number_2() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		assertEquals(15.0, cal.equal());
	}

	// ３つの数値の加算。二つの値が加算された後、数字 + = で、前回の　演算子+　でその数値を足す
	public void test_3_number_is_added_to_previous_result_2() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorAdd();
		cal.setVal(10);
		assertEquals(25.0, cal.equal());
	}

	// Clearでmemory、途中の計算結果は消える
	public void test_add_clear() {

	}

	/*
	 * Subtract test
	 */

	// 2つの値が減算される
	public void test_sub_tow_number_2() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);
		assertEquals(-5.0, cal.equal());
	}

	// ３つの数値の減算。二つの値が減算された後、数字 - = で、前回の　演算子-　でその数値を引く
	public void test_new_number_is_subtracted_with_previous_result() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(100);
		assertEquals(-105.0, cal.equal());
	}

	/*
	 * 足し算と引き算
	 */
	public void test_add_and_sub() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(100);
		assertEquals(-85.0, cal.equal());
	}

	/*
	 * かけ算
	 */
	// 2つの値を乗算する
	public void test_mul_tow_number() {
		cal.setVal(5);
		cal.setOperatorMul();
		cal.setVal(10);
		assertEquals(50.0, cal.equal());
	}

	// 3つの値を乗算する
	public void test_mul_three_numbers() {
		cal.setVal(5);
		cal.setOperatorMul();
		cal.setVal(10);
		cal.setOperatorMul();
		cal.setVal(50);
		assertEquals(2500.0, cal.equal());
	}

	// 足し算／引き算／かけ算
	public void test_mul_is_calculated_prior_to_sub() {
		cal.setVal(5);// total 5
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();// total 15
		cal.setVal(8);
		cal.setOperatorMul();// -8は先に30をかける
		cal.setVal(30);

		assertEquals(-225.0, cal.equal());
	}

	public void test_mul_is_calculated_prior_to_add() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);// total 5
		cal.setOperatorAdd();// total 15
		cal.setVal(8);
		cal.setOperatorMul();// 8は先に30をかける
		cal.setVal(30);

		assertEquals(235.0, cal.equal());
	}

	/*
	 * 除算
	 */
	// 2つの値を除算する
	public void test_div_two_numbers() {
		cal.setVal(5);
		cal.setOperatorDiv();
		cal.setVal(10);
		assertEquals(0.5, cal.equal());
	}

	// 3つの値を除算する
	public void test_div_three_numbers() {
		cal.setVal(10);
		cal.setOperatorDiv();
		cal.setVal(2);
		cal.setOperatorDiv();
		cal.setVal(5);
		assertEquals(1.0, cal.equal());
	}

	// 足し算／引き算／除算
	public void test_div_is_calculated_prior_to_sub() {
		cal.setVal(5);// total 5
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();// total 15
		cal.setVal(6);
		cal.setOperatorDiv();// -8は先に30をかける
		cal.setVal(3);

		assertEquals(13.0, cal.equal());
	}

	public void test_div_is_calculated_prior_to_add() {
		cal.setVal(5);
		cal.setOperatorSub();
		cal.setVal(10);
		cal.setOperatorAdd();
		cal.setVal(6);
		cal.setOperatorDiv();
		cal.setVal(3);

		assertEquals(-3.0, cal.equal());
	}

	// 足し算／引き算／除算/乗算
	public void test_add_sub_div_mul() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(6);
		cal.setOperatorDiv();
		cal.setVal(3);
		cal.setOperatorMul();
		cal.setVal(4);

		assertEquals(7.0, cal.equal());
	}

	public void test_add_sub_div_mul_2() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(6);
		cal.setOperatorDiv();
		cal.setVal(3);
		cal.setOperatorMul();
		cal.setVal(4);
		cal.setOperatorAdd();
		cal.setVal(3);

		assertEquals(10.0, cal.equal());
	}

	public void test_add_sub_div_mul_3() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(6);
		cal.setOperatorDiv();
		cal.setVal(3);
		cal.setOperatorMul();
		cal.setVal(4);
		cal.setOperatorSub();
		cal.setVal(3);

		assertEquals(4.0, cal.equal());
	}

	public void test_add_sub_div_mul_4() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(6);
		cal.setOperatorDiv();
		cal.setVal(3);
		cal.setOperatorMul();
		cal.setVal(4);
		cal.setOperatorSub();
		cal.setVal(3);
		cal.setOperatorAdd();
		cal.setVal(6);

		assertEquals(10.0, cal.equal());
	}

	public void test_add_sub_div_mul_5() {
		cal.setVal(5);
		cal.setOperatorAdd();
		cal.setVal(10);
		cal.setOperatorSub();
		cal.setVal(6);
		cal.setOperatorDiv();
		cal.setVal(3);
		cal.setOperatorMul();
		cal.setVal(4);
		cal.setOperatorSub();
		cal.setVal(3);
		cal.setOperatorAdd();
		cal.setVal(6);
		cal.setOperatorDiv();
		cal.setVal(5);

		assertEquals(5.2, cal.equal());
	}

	// 定数乗算。後にかけた値がセットされ、移行　？＝　でセットされた値でかけ算していく
	public void test_numbers_are_continuously_multipled_with_equal() {
		cal.setVal(5);
		cal.setOperatorMul();
		cal.setVal(10);
		assertEquals(50.0, cal.equal());
		cal.setVal(6);
		assertEquals(60.0, cal.equal());
	}

	// 定数加算。後にかけた値がセットされ、移行　？＝　でセットされた値で加算算していく
	public void test_numbers_are_continuously_added_with_equal() {
		cal.setVal(5);
		cal.setOperatorMul();
		cal.setVal(10);
		assertEquals(50.0, cal.equal());
		cal.setVal(6);
		assertEquals(60.0, cal.equal());
	}

	// 0で割ったらエラー表示
	// overflowにおいては 1e の表記を行う

}
